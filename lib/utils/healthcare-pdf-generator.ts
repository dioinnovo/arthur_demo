import jsPDF from 'jspdf'
import { PatientPolicyData } from '@/lib/ai/mock-patient-data'

export function generateHealthcarePolicyPDF(data: PatientPolicyData | string): void {
  // If it's a markdown string, use the markdown PDF generator
  if (typeof data === 'string') {
    generateMarkdownPDF(data)
    return
  }

  // Otherwise, use the original patient data PDF generator
  const patientData = data as PatientPolicyData
  const pdf = new jsPDF('p', 'mm', 'a4')
  const pageWidth = 210
  const pageHeight = 297
  const margin = 20
  const contentWidth = pageWidth - (margin * 2)
  let yPosition = margin

  // Define colors - healthcare professional theme
  const primaryColor = '#0066CC' // Arthur Health Blue
  const secondaryColor = '#4b5563' // Medium gray
  const accentColor = '#00A651' // Healthcare green
  const warningColor = '#F59E0B' // Amber for alerts

  // Helper functions
  const addText = (text: string, x: number, y: number, options: any = {}) => {
    const { fontSize = 10, color = primaryColor, align = 'left', fontStyle = 'normal' } = options
    pdf.setFontSize(fontSize)
    pdf.setTextColor(color)
    pdf.setFont('helvetica', fontStyle)

    if (align === 'center') {
      pdf.text(text, x, y, { align: 'center' })
    } else {
      pdf.text(text, x, y)
    }

    return y + (fontSize * 0.35) + 2
  }

  const addSection = (title: string, y: number) => {
    pdf.setFillColor(230, 240, 255) // Light blue background
    pdf.rect(margin, y - 3, contentWidth, 8, 'F')
    return addText(title, margin + 2, y + 2, { fontSize: 12, fontStyle: 'bold', color: primaryColor })
  }

  const addLine = (y: number) => {
    pdf.setDrawColor(229, 231, 235) // Light gray line
    pdf.line(margin, y, pageWidth - margin, y)
    return y + 3
  }

  const checkPageBreak = (requiredSpace: number) => {
    if (yPosition + requiredSpace > pageHeight - margin) {
      pdf.addPage()
      yPosition = margin
      return true
    }
    return false
  }

  const addWrappedText = (text: string, x: number, y: number, maxWidth: number, options: any = {}) => {
    const { fontSize = 10, color = secondaryColor, lineHeight = 5 } = options
    pdf.setFontSize(fontSize)
    pdf.setTextColor(color)
    pdf.setFont('helvetica', 'normal')

    const lines = pdf.splitTextToSize(text, maxWidth)
    let currentY = y

    lines.forEach((line: string) => {
      checkPageBreak(lineHeight + 5)
      pdf.text(line, x, currentY)
      currentY += lineHeight
    })

    return currentY
  }

  // Header with Arthur Health branding
  pdf.setFillColor(0, 102, 204) // Arthur Health Blue
  pdf.rect(0, 0, pageWidth, 35, 'F')

  // Title
  pdf.setTextColor(255, 255, 255)
  pdf.setFontSize(20)
  pdf.setFont('helvetica', 'bold')
  pdf.text('Healthcare Policy Analysis Report', pageWidth / 2, 15, { align: 'center' })

  pdf.setFontSize(12)
  pdf.setFont('helvetica', 'normal')
  pdf.text('Generated by Arthur AI - Arthur Health Intelligence Platform', pageWidth / 2, 23, { align: 'center' })

  pdf.setFontSize(10)
  pdf.text(new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }), pageWidth / 2, 29, { align: 'center' })

  yPosition = 45

  // Executive Summary Box
  pdf.setFillColor(240, 248, 255) // Very light blue
  pdf.rect(margin, yPosition, contentWidth, 35, 'F')
  pdf.setDrawColor(0, 102, 204)
  pdf.setLineWidth(0.5)
  pdf.rect(margin, yPosition, contentWidth, 35, 'S')

  yPosition = addText('EXECUTIVE SUMMARY', margin + 5, yPosition + 7, { fontSize: 11, fontStyle: 'bold', color: primaryColor })
  yPosition = addText(`Patient: ${patientData.patientName} (MRN: ${patientData.mrn})`, margin + 5, yPosition + 3, { fontSize: 10 })
  yPosition = addText(`Insurance: ${patientData.carrier} - ${patientData.planType}`, margin + 5, yPosition + 4, { fontSize: 10 })
  yPosition = addText(`Deductible Status: $${patientData.deductibles.individual.remaining} remaining of $${patientData.deductibles.individual.inNetwork}`, margin + 5, yPosition + 4, { fontSize: 10 })
  yPosition = addText(`Out-of-Pocket Max: $${patientData.coverageLimits.outOfPocketMax.individual}`, margin + 5, yPosition + 4, { fontSize: 10 })

  yPosition += 10

  // Patient Information Section
  checkPageBreak(40)
  yPosition = addSection('PATIENT INFORMATION', yPosition)
  yPosition += 3

  const patientInfo = [
    ['Name:', patientData.patientName],
    ['MRN:', patientData.mrn],
    ['Date of Birth:', patientData.dateOfBirth],
    ['Age:', `${patientData.age} years`],
    ['Primary Care Provider:', patientData.primaryCareProvider],
    ['Gender:', patientData.gender]
  ]

  patientInfo.forEach(([label, value]) => {
    yPosition = addText(label, margin + 5, yPosition, { fontSize: 10, fontStyle: 'bold', color: secondaryColor })
    yPosition = addText(value, margin + 45, yPosition - 4, { fontSize: 10 })
  })

  yPosition += 5

  // Insurance Coverage Details
  checkPageBreak(50)
  yPosition = addSection('INSURANCE COVERAGE DETAILS', yPosition)
  yPosition += 3

  const coverageInfo = [
    ['Carrier:', patientData.carrier],
    ['Plan Type:', patientData.planType],
    ['Policy Number:', patientData.policyNumber],
    ['Group Number:', patientData.groupNumber],
    ['Subscriber ID:', patientData.subscriberId],
    ['Coverage Period:', `${patientData.effectiveDates.start} - ${patientData.effectiveDates.end}`]
  ]

  coverageInfo.forEach(([label, value]) => {
    yPosition = addText(label, margin + 5, yPosition, { fontSize: 10, fontStyle: 'bold', color: secondaryColor })
    yPosition = addText(value, margin + 45, yPosition - 4, { fontSize: 10 })
  })

  yPosition += 5

  // Financial Summary
  checkPageBreak(50)
  yPosition = addSection('FINANCIAL SUMMARY', yPosition)
  yPosition += 3

  // Deductible Progress Bar
  yPosition = addText('Deductible Progress:', margin + 5, yPosition, { fontSize: 10, fontStyle: 'bold', color: secondaryColor })
  yPosition += 2

  const deductibleMet = patientData.deductibles.individual.inNetwork - patientData.deductibles.individual.remaining
  const deductiblePercentage = (deductibleMet / patientData.deductibles.individual.inNetwork) * 100

  // Draw progress bar
  pdf.setDrawColor(200, 200, 200)
  pdf.setLineWidth(0.5)
  pdf.rect(margin + 5, yPosition - 3, 100, 6, 'S')

  pdf.setFillColor(0, 166, 81) // Green
  pdf.rect(margin + 5, yPosition - 3, deductiblePercentage, 6, 'F')

  yPosition = addText(`$${deductibleMet} of $${patientData.deductibles.individual.inNetwork} (${deductiblePercentage.toFixed(0)}%)`, margin + 110, yPosition - 1, { fontSize: 9 })
  yPosition += 5

  // Cost sharing details
  yPosition = addText('Cost Sharing:', margin + 5, yPosition, { fontSize: 10, fontStyle: 'bold', color: secondaryColor })
  yPosition += 2

  const costSharing = [
    [`In-Network Coinsurance: ${patientData.coinsurance.inNetwork}%`, `Out-of-Network: ${patientData.coinsurance.outOfNetwork}%`],
    [`Primary Care: $${patientData.copays.primaryCare}`, `Specialist: $${patientData.copays.specialist}`],
    [`Emergency Room: $${patientData.copays.emergencyRoom}`, `Urgent Care: $${patientData.copays.urgentCare}`],
    [`Generic Drugs: $${patientData.copays.genericDrugs}`, `Brand Drugs: $${patientData.copays.brandDrugs}`]
  ]

  costSharing.forEach(([left, right]) => {
    yPosition = addText(left, margin + 5, yPosition, { fontSize: 9 })
    yPosition = addText(right, margin + 95, yPosition - 3.5, { fontSize: 9 })
  })

  yPosition += 5

  // Current Medical Profile
  checkPageBreak(50)
  yPosition = addSection('CURRENT MEDICAL PROFILE', yPosition)
  yPosition += 3

  yPosition = addText('Active Conditions:', margin + 5, yPosition, { fontSize: 10, fontStyle: 'bold', color: secondaryColor })
  yPosition += 2

  patientData.currentConditions.forEach(condition => {
    yPosition = addText(`• ${condition}`, margin + 10, yPosition, { fontSize: 9 })
  })

  yPosition += 3
  yPosition = addText('Current Medications:', margin + 5, yPosition, { fontSize: 10, fontStyle: 'bold', color: secondaryColor })
  yPosition += 2

  patientData.currentMedications.forEach(med => {
    yPosition = addText(`• ${med.name} (${med.dosage}) - ${med.frequency}`, margin + 10, yPosition, { fontSize: 9 })
    yPosition = addText(`  Coverage: ${med.coveredTier}`, margin + 12, yPosition, { fontSize: 8, color: secondaryColor })
  })

  yPosition += 5

  // Coverage Gaps (if any)
  if (patientData.coverageGaps && patientData.coverageGaps.length > 0) {
    checkPageBreak(40)
    yPosition = addSection('⚠️ COVERAGE GAPS IDENTIFIED', yPosition)
    yPosition += 3

    pdf.setFillColor(255, 243, 224) // Light warning background
    pdf.rect(margin + 3, yPosition - 2, contentWidth - 6, patientData.coverageGaps.length * 6 + 4, 'F')

    patientData.coverageGaps.forEach(gap => {
      yPosition = addText(`• ${gap}`, margin + 5, yPosition, { fontSize: 9, color: warningColor })
    })

    yPosition += 5
  }

  // Optimization Opportunities
  if (patientData.optimizationOpportunities && patientData.optimizationOpportunities.length > 0) {
    checkPageBreak(40)
    yPosition = addSection('✓ COST OPTIMIZATION OPPORTUNITIES', yPosition)
    yPosition += 3

    pdf.setFillColor(220, 252, 231) // Light green background
    pdf.rect(margin + 3, yPosition - 2, contentWidth - 6, patientData.optimizationOpportunities.length * 6 + 4, 'F')

    patientData.optimizationOpportunities.forEach(opportunity => {
      yPosition = addText(`• ${opportunity}`, margin + 5, yPosition, { fontSize: 9, color: accentColor })
    })

    yPosition += 5
  }

  // Prior Authorization Requirements
  checkPageBreak(40)
  yPosition = addSection('PRIOR AUTHORIZATION REQUIREMENTS', yPosition)
  yPosition += 3

  const priorAuthList = patientData.priorAuthRequired.slice(0, 8)
  priorAuthList.forEach(item => {
    yPosition = addText(`• ${item}`, margin + 5, yPosition, { fontSize: 9 })
  })

  if (patientData.priorAuthRequired.length > 8) {
    yPosition = addText(`... and ${patientData.priorAuthRequired.length - 8} more`, margin + 5, yPosition + 2, { fontSize: 8, color: secondaryColor })
  }

  yPosition += 5

  // Recent Claims Activity
  if (patientData.recentClaims && patientData.recentClaims.length > 0) {
    checkPageBreak(50)
    yPosition = addSection('RECENT CLAIMS ACTIVITY', yPosition)
    yPosition += 3

    // Table header
    pdf.setFillColor(240, 240, 240)
    pdf.rect(margin + 3, yPosition - 2, contentWidth - 6, 7, 'F')

    yPosition = addText('Date', margin + 5, yPosition + 2, { fontSize: 9, fontStyle: 'bold' })
    yPosition = addText('Service', margin + 35, yPosition - 3.5, { fontSize: 9, fontStyle: 'bold' })
    yPosition = addText('Billed', margin + 105, yPosition - 3.5, { fontSize: 9, fontStyle: 'bold' })
    yPosition = addText('Patient Resp.', margin + 130, yPosition - 3.5, { fontSize: 9, fontStyle: 'bold' })
    yPosition = addText('Status', margin + 160, yPosition - 3.5, { fontSize: 9, fontStyle: 'bold' })
    yPosition += 4

    patientData.recentClaims.slice(0, 5).forEach((claim, index) => {
      if (index % 2 === 0) {
        pdf.setFillColor(248, 248, 248)
        pdf.rect(margin + 3, yPosition - 2, contentWidth - 6, 5, 'F')
      }

      yPosition = addText(claim.date, margin + 5, yPosition, { fontSize: 8 })
      yPosition = addText(claim.service.substring(0, 30), margin + 35, yPosition - 3, { fontSize: 8 })
      yPosition = addText(`$${claim.billedAmount}`, margin + 105, yPosition - 3, { fontSize: 8 })
      yPosition = addText(`$${claim.patientResponsibility}`, margin + 130, yPosition - 3, { fontSize: 8 })
      yPosition = addText(claim.status, margin + 160, yPosition - 3, { fontSize: 8 })
      yPosition += 2
    })
  }

  // Recommendations
  checkPageBreak(60)
  yPosition += 5
  yPosition = addSection('RECOMMENDATIONS', yPosition)
  yPosition += 3

  const recommendations = [
    {
      title: 'Immediate Actions:',
      items: [
        'Review prior authorization requirements for upcoming procedures',
        'Verify in-network status of all providers before appointments',
        'Update insurance information with all specialists'
      ]
    },
    {
      title: 'Cost Savings Opportunities:',
      items: [
        'Use mail-order pharmacy for maintenance medications (90-day supply)',
        'Consider generic alternatives when available',
        'Utilize preventive care benefits (100% covered in-network)'
      ]
    },
    {
      title: 'Care Coordination:',
      items: [
        'Ensure all providers have current insurance information',
        'Document medical necessity for prior authorizations',
        'Coordinate care through primary care provider for referrals'
      ]
    }
  ]

  recommendations.forEach(section => {
    checkPageBreak(25)
    yPosition = addText(section.title, margin + 5, yPosition, { fontSize: 10, fontStyle: 'bold', color: primaryColor })
    yPosition += 2

    section.items.forEach(item => {
      yPosition = addWrappedText(`• ${item}`, margin + 10, yPosition, contentWidth - 15, { fontSize: 9 })
      yPosition += 1
    })

    yPosition += 3
  })

  // Footer
  checkPageBreak(20)
  yPosition = pageHeight - 25
  pdf.setDrawColor(200, 200, 200)
  pdf.line(margin, yPosition, pageWidth - margin, yPosition)

  yPosition += 5
  pdf.setFontSize(8)
  pdf.setTextColor(150, 150, 150)
  pdf.text('This report is for informational purposes only and should not replace professional medical advice.', pageWidth / 2, yPosition, { align: 'center' })
  yPosition += 4
  pdf.text('Generated by Arthur AI - Arthur Health Intelligence Platform', pageWidth / 2, yPosition, { align: 'center' })
  yPosition += 4
  pdf.text(`Report Date: ${new Date().toLocaleString()}`, pageWidth / 2, yPosition, { align: 'center' })

  // Add page numbers
  const pageCount = (pdf as any).internal.getNumberOfPages()
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i)
    pdf.setFontSize(9)
    pdf.setTextColor(150, 150, 150)
    pdf.text(`Page ${i} of ${pageCount}`, pageWidth - margin, pageHeight - 10, { align: 'right' })
  }

  // Save the PDF
  const fileName = `${patientData.patientName.replace(/\s+/g, '_')}_Policy_Analysis_${new Date().toISOString().split('T')[0]}.pdf`
  pdf.save(fileName)
}

// Export wrapper function for backward compatibility
export function generatePolicyAnalysisPDF(data: any): void {
  // Check if it's patient data (has mrn field) or old policy data
  if (data.mrn) {
    generateHealthcarePolicyPDF(data as PatientPolicyData)
  } else {
    // For backward compatibility, create a basic PDF for old policy data
    const pdf = new jsPDF()
    pdf.text('Policy Analysis Report', 20, 20)
    pdf.text(`Insured: ${data.insuredName || 'Unknown'}`, 20, 40)
    pdf.text(`Policy: ${data.policyNumber || 'Unknown'}`, 20, 50)
    pdf.text(`Carrier: ${data.carrier || 'Unknown'}`, 20, 60)
    pdf.save('policy_analysis.pdf')
  }
}

// Function to generate PDF from markdown content
function generateMarkdownPDF(markdownContent: string): void {
  const pdf = new jsPDF('p', 'mm', 'a4')
  const pageWidth = 210
  const pageHeight = 297
  const margin = 20
  const contentWidth = pageWidth - (margin * 2)
  let yPosition = margin

  // Parse markdown content into lines
  const lines = markdownContent.split('\n')

  // Helper function to check page break
  const checkPageBreak = (requiredSpace: number) => {
    if (yPosition + requiredSpace > pageHeight - margin) {
      pdf.addPage()
      yPosition = margin
      return true
    }
    return false
  }

  // Helper function to add wrapped text
  const addWrappedText = (text: string, fontSize: number = 10, isBold: boolean = false) => {
    pdf.setFontSize(fontSize)
    pdf.setFont('helvetica', isBold ? 'bold' : 'normal')
    const splitText = pdf.splitTextToSize(text, contentWidth)

    splitText.forEach((line: string) => {
      checkPageBreak(fontSize * 0.5)
      pdf.text(line, margin, yPosition)
      yPosition += fontSize * 0.5
    })
  }

  // Track current section for special formatting
  let inCoverageGaps = false
  let inOptimization = false

  // Process each line
  lines.forEach(line => {
    // Check for special sections
    if (line.includes('Coverage Gaps') || line.includes('COVERAGE GAPS')) {
      inCoverageGaps = true
      inOptimization = false
    } else if (line.includes('Optimization') || line.includes('OPTIMIZATION')) {
      inOptimization = true
      inCoverageGaps = false
    } else if (line.startsWith('## ') || line.startsWith('# ')) {
      inCoverageGaps = false
      inOptimization = false
    }

    // Headers
    if (line.startsWith('# ')) {
      checkPageBreak(20)
      yPosition += 2
      pdf.setFontSize(18)
      pdf.setFont('helvetica', 'bold')
      pdf.setTextColor(0, 102, 204) // Arthur Health Blue
      pdf.text(line.substring(2), margin, yPosition)
      yPosition += 10
    } else if (line.startsWith('## ')) {
      checkPageBreak(18)
      yPosition += 3
      // Add blue background box for section headers
      pdf.setFillColor(230, 240, 255) // Light blue background
      pdf.rect(margin, yPosition - 5, contentWidth, 9, 'F')

      pdf.setFontSize(13)
      pdf.setFont('helvetica', 'bold')
      pdf.setTextColor(0, 102, 204)
      pdf.text(line.substring(3), margin + 3, yPosition)
      yPosition += 8
    } else if (line.startsWith('### ')) {
      checkPageBreak(12)
      yPosition += 2
      pdf.setFontSize(11)
      pdf.setFont('helvetica', 'bold')
      pdf.setTextColor(75, 85, 99) // Dark gray
      pdf.text(line.substring(4), margin + 2, yPosition)
      yPosition += 6
    }
    // Bold text
    else if (line.startsWith('**') && line.endsWith('**')) {
      const text = line.substring(2, line.length - 2)
      checkPageBreak(10)
      pdf.setTextColor(0, 0, 0)
      addWrappedText(text, 10, true)
    }
    // List items
    else if (line.startsWith('- ') || line.startsWith('• ')) {
      checkPageBreak(8)

      const text = line.substring(2)
      const splitText = pdf.splitTextToSize(text, contentWidth - 10)
      const itemHeight = splitText.length * 5 + 2

      // Add background for special sections
      if (inCoverageGaps) {
        pdf.setFillColor(255, 243, 224) // Light orange for warnings
        pdf.rect(margin, yPosition - 3, contentWidth, itemHeight, 'F')
        pdf.setTextColor(217, 119, 6) // Orange text
      } else if (inOptimization) {
        pdf.setFillColor(220, 252, 231) // Light green for opportunities
        pdf.rect(margin, yPosition - 3, contentWidth, itemHeight, 'F')
        pdf.setTextColor(5, 150, 105) // Green text
      } else {
        pdf.setTextColor(0, 0, 0)
      }

      pdf.setFontSize(10)
      pdf.setFont('helvetica', 'normal')

      // Add bullet
      pdf.text('•', margin + 2, yPosition)

      // Add text with indent
      splitText.forEach((textLine: string, index: number) => {
        if (index > 0) {
          checkPageBreak(5)
        }
        pdf.text(textLine, margin + 7, yPosition)
        yPosition += 5
      })

      yPosition += 1 // Add small gap between items
    }
    // Table separator
    else if (line.startsWith('|---') || line.startsWith('|:--')) {
      // Skip table formatting lines
    }
    // Table rows
    else if (line.startsWith('|')) {
      const cells = line.split('|').filter(cell => cell.trim())
      checkPageBreak(8)
      pdf.setFontSize(9)
      pdf.setFont('helvetica', 'normal')
      pdf.setTextColor(0, 0, 0)

      let xPos = margin
      const cellWidth = contentWidth / cells.length

      cells.forEach(cell => {
        const trimmedCell = cell.trim()
        // Wrap text if too long
        const splitText = pdf.splitTextToSize(trimmedCell, cellWidth - 2)
        pdf.text(splitText[0], xPos, yPosition)
        xPos += cellWidth
      })
      yPosition += 6
    }
    // Horizontal rule
    else if (line.startsWith('---')) {
      checkPageBreak(5)
      pdf.setDrawColor(229, 231, 235)
      pdf.line(margin, yPosition, pageWidth - margin, yPosition)
      yPosition += 5
    }
    // Regular text
    else if (line.trim()) {
      checkPageBreak(8)
      pdf.setTextColor(0, 0, 0)
      addWrappedText(line, 10, false)
    }
    // Empty line
    else {
      yPosition += 3
    }
  })

  // Add footer on last page
  pdf.setFontSize(8)
  pdf.setTextColor(128, 128, 128)
  pdf.text('Generated by Arthur Health Intelligence Platform', pageWidth / 2, pageHeight - 10, { align: 'center' })

  // Generate filename from content
  let filename = 'Healthcare_Policy_Analysis'
  const titleMatch = markdownContent.match(/\*\*Patient:\*\* ([^\n]+)/)
  if (titleMatch) {
    filename = `${titleMatch[1].replace(/\s+/g, '_')}_Healthcare_Analysis`
  }

  // Save the PDF
  pdf.save(`${filename}_${new Date().toISOString().split('T')[0]}.pdf`)
}